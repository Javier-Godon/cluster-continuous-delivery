name: Generate YAML Manifests From Kcl Konfig

on:
  push:
    paths:
      - "**/*.k" # Trigger only when KCL files are changed
      - "**apps/deployments/**" # Trigger if deployments are updated

jobs:
  generate-yaml:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full Git history

      # kcl: https://www.kcl-lang.io/docs/next/user_docs/guides/package-management/how-to/push_github_action
      # Step 2: Set up Go environment
      - name: Set up Go 1.23
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      # Step 3: Install KCL CLI
      - name: Install KCL CLI
        run: go install kcl-lang.io/cli/cmd/kcl@latest

      # Step 4: Identify Changed Folders
      - name: Determine changed folders
        id: changes
        run: |
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            BASE_REF="HEAD~1"
          else
            BASE_REF="${{ github.event.before }}"
          fi

          git fetch origin $BASE_REF

          # Detect changes in 'base' and specific environments
          BASE_CHANGED=$(git diff --name-only $BASE_REF ${{ github.sha }} | grep '^apps/deployments/.*/base/' || true)
          ENV_CHANGED=$(git diff --name-only $BASE_REF ${{ github.sha }} | grep '^apps/deployments/.*/\(dev\|stg\|pro\)/' || true)

          echo "Base changes detected in: $BASE_CHANGED"
          echo "Environment changes detected in: $ENV_CHANGED"

          # Create environment list for projects affected by 'base' changes
          AFFECTED_PROJECTS=$(echo "$BASE_CHANGED" | awk -F'/' '{print $3}' | sort -u | tr '\n' ' ')
          ENV_FOLDERS=$(echo "$ENV_CHANGED" | awk -F'/' '{print $3"/"$4}' | sort -u | tr '\n' ' ')

          # Validate and sanitize outputs
          [ -z "$AFFECTED_PROJECTS" ] && AFFECTED_PROJECTS=""
          [ -z "$ENV_FOLDERS" ] && ENV_FOLDERS=""

          echo "Affected projects from base: $AFFECTED_PROJECTS"
          echo "Affected environment folders: $ENV_FOLDERS"

          # Save results
          echo "projects=$AFFECTED_PROJECTS" >> $GITHUB_ENV
          echo "env_folders=$ENV_FOLDERS" >> $GITHUB_ENV

      - name: Debug final env_folders format
        run: |
          echo "Formatted env_folders: ${{ env.env_folders }}"

      # Debug changed projects and environments
      - name: Debug changed projects and environments
        run: |
          echo "Projects affected by base: ${{ env.projects }}"
          echo "Environment folders affected: ${{ env.env_folders }}"

      - name: Debug Directory Structure
        run: |
          echo "Listing base directory structure:"
          ls -R apps/deployments
          echo "Listing directories for each project and environment:"
          for PROJECT in ${{ env.projects }}; do
            for ENV in dev stg pro; do
              echo "Checking directory: apps/deployments/$PROJECT/$ENV"
              ls apps/deployments/$PROJECT/$ENV || echo "Directory does not exist!"
            done
          done

      - name: Process environment changes (generate manifests for specific environments)
        if: ${{ env.env_folders != '' }}
        run: |
          for FOLDER in ${{ env.env_folders }}; do
            SERVICE=$(echo $FOLDER | cut -d'/' -f1)
            ENVIRONMENT=$(echo $FOLDER | cut -d'/' -f2)
            if [ -z "$SERVICE" ] || [ -z "$ENVIRONMENT" ]; then
              echo "Skipping invalid folder: $FOLDER"
              continue
            fi
            echo "Processing apps/deployments/$SERVICE/$ENVIRONMENT"
            OUTPUT_DIR="apps/deployments/$SERVICE/$ENVIRONMENT/manifests"
            mkdir -p $OUTPUT_DIR
            kcl -d apps/deployments/$SERVICE/$ENVIRONMENT -o $OUTPUT_DIR/kubernetes-manifests.yaml
            echo "Generated files:"
            ls $OUTPUT_DIR || echo "No files generated in $OUTPUT_DIR"
          done

      - name: Process base changes (generate manifests for all environments in the project)
        if: ${{ env.projects != '' }}
        run: |
          for PROJECT in ${{ env.projects }}; do
            if [ -z "$PROJECT" ]; then
              echo "Skipping invalid project"
              continue
            fi
            echo "Processing all environments for project: $PROJECT"
            for ENV in dev stg pro; do
              OUTPUT_DIR="apps/deployments/$PROJECT/$ENV/manifests"
              mkdir -p $OUTPUT_DIR
              echo "Generating manifests for $PROJECT/$ENV using base configuration"
              kcl -d apps/deployments/$PROJECT/$ENV -o $OUTPUT_DIR/kubernetes-manifests.yaml
              echo "Generated files:"
              ls $OUTPUT_DIR || echo "No files generated in $OUTPUT_DIR"
            done
          done

      - name: Check for Git changes
        run: |
          git status
          git diff
          git ls-files -m

      - name: Stage and commit changes
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add -f apps/deployments/*/*/manifests/ || echo "No changes to add"
          git status
          if git diff-index --quiet HEAD; then
            echo "No changes detected. Skipping commit."
          else
            git commit -m "Update manifests for changed environments"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
